{"version":3,"sources":["man.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","analytics","SignIn","console","log","className","onClick","provider","GoogleAuthProvider","signInWithPopup","FacebookAuthProvider","GithubAuthProvider","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","displayName","uid","photoURL","email","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","key","id","message","ref","onSubmit","value","onChange","target","placeholder","type","disabled","Card","props","class","src","name","MyVerticallyCenteredModal","Modal","size","aria-labelledby","centered","Body","React","modalShow","setModalShow","messageClass","pict","show","onHide","App","useAuthState","user","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.a93ce63a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/man.2369d24d.svg\";","import React, { useRef, useState } from 'react';\r\nimport './App.css';\r\nimport  pict from './man.svg';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { GoogleLoginButton,FacebookLoginButton,GithubLoginButton } from \"react-social-login-buttons\";\r\n\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\nimport 'firebase/analytics';\r\n\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\r\n\r\nfirebase.initializeApp({\r\n  apiKey: \"AIzaSyCyvh9LIiJF0qDuTAToeTbM-mE8x4FCXME\",\r\n    authDomain: \"shyshkovskyi-smoilovskyi-chat.firebaseapp.com\",\r\n    projectId: \"shyshkovskyi-smoilovskyi-chat\",\r\n    storageBucket: \"shyshkovskyi-smoilovskyi-chat.appspot.com\",\r\n    messagingSenderId: \"1059185687298\",\r\n    appId: \"1:1059185687298:web:c17bb8e6e3d3f4778a201b\",\r\n    measurementId: \"G-VNN0574L8Z\"\r\n\r\n})\r\n\r\nconst auth = firebase.auth();\r\nconst firestore = firebase.firestore();\r\nconst analytics = firebase.analytics();\r\n\r\n\r\nfunction App() {\r\n\r\n  const [user] = useAuthState(auth);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>S&S chat</h1>\r\n        <SignOut />\r\n      </header>\r\n\r\n      <section>\r\n        {user ? <ChatRoom /> : <SignIn />}\r\n      </section>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SignIn() {\r\n\r\n  const signInWithGoogle = () => {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n    auth.signInWithPopup(provider);\r\n  }\r\n\r\n  const signInWithGitHub = () => {\r\n    const provider = new firebase.auth.GithubAuthProvider();\r\n    auth.signInWithPopup(provider);\r\n  }\r\n\r\n  const signInWithFacebook = () => {\r\n    var provider = new firebase.auth.FacebookAuthProvider();\r\n    auth.signInWithPopup(provider);\r\n  }\r\n\r\n  const anonymSinng = () => {\r\n    firebase.auth().signInAnonymously()\r\n  .then(() => {\r\n    // Signed in..\r\n  })\r\n  .catch((error) => {\r\n    var errorCode = error.code;\r\n    var errorMessage = error.message;\r\n    // ...\r\n  });\r\n  }\r\n  console.log()\r\n  return (\r\n    <div className=\"signIn\">\r\n      <GoogleLoginButton  onClick={signInWithGoogle} />\r\n      <FacebookLoginButton onClick={signInWithFacebook} />\r\n      <GithubLoginButton onClick={signInWithGitHub} />\r\n      {/*<button className=\"sign-in\" onClick={anonymSinng}>anonymSinng</button>*/}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nfunction SignOut() {\r\n  return auth.currentUser && (\r\n    <button className=\"sign-out\" onClick={() => auth.signOut()}>Sign Out</button>\r\n  )\r\n}\r\n\r\n\r\nfunction ChatRoom() {\r\n  const dummy = useRef();\r\n  const messagesRef = firestore.collection('messages');\r\n  const query = messagesRef.orderBy('createdAt');\r\n\r\n  const [messages] = useCollectionData(query, { idField: 'id' });\r\n\r\n  const [formValue, setFormValue] = useState('');\r\n\r\n\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const { displayName,uid, photoURL,email } = auth.currentUser;\r\n\r\n    await messagesRef.add({\r\n      email,\r\n      displayName,\r\n      text: formValue,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      uid,\r\n      photoURL\r\n    })\r\n\r\n    setFormValue('');\r\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\r\n  }\r\n\r\n  return (<>\r\n    <main>\r\n\r\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\r\n\r\n      <span ref={dummy}></span>\r\n\r\n    </main>\r\n\r\n    <form onSubmit={sendMessage}>\r\n\r\n      <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\r\n\r\n      <button type=\"submit\" disabled={!formValue}>üïäÔ∏è</button>\r\n\r\n    </form>\r\n  </>)\r\n}\r\n\r\nfunction Card(props){\r\n  return(\r\n      <div class=\"our-team\">\r\n        <div class=\"picture\">\r\n          <img class=\"img-fluid\" src={props.photoURL}/>\r\n        </div>\r\n        <div class=\"team-content\">\r\n          <h3 class=\"name\">{props.name}</h3>\r\n          <h4 class=\"title\">{props.email}</h4>\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nfunction MyVerticallyCenteredModal(props) {\r\n  console.log(props.photoURL)\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"sm\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Body>\r\n      <Card\r\n      name = {props.name}\r\n      email = {props.email}\r\n      photoURL = {props.photoURL}\r\n      />\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\n\r\nfunction ChatMessage(props) {\r\n  const { displayName,text, uid, photoURL ,email} = props.message;\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\r\n\r\n  return (<>\r\n    <div className={`message ${messageClass}`}>\r\n      <img className=\"messageImg\" src={photoURL || pict} onClick={() => setModalShow(true)} />\r\n      <p className=\"messageText\">{text}</p>   \r\n      <MyVerticallyCenteredModal\r\n          name = {displayName || \"Anonym\"}\r\n          email = {email}\r\n          photoURL = {photoURL || pict}\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n      />\r\n    </div>\r\n  </>)\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}